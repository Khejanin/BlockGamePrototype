using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using BlockGame.Scenes;

namespace GDLibrary
{
    public class Main : Game
    {
        private GraphicsDeviceManager _graphics;
        private SpriteBatch _spriteBatch;
        private BasicEffect unlitTexturedEffect, unlitWireframeEffect;
        private CameraManager cameraManager;
        private ObjectManager objectManager;
        private KeyboardManager keyboardManager;
        private MouseManager mouseManager;
<<<<<<< HEAD
        private BasicEffect modelEffect;
        private SpriteFont debugFont;
        private ModelObject archetypalBoxWireframe;
        private BasicEffect wireframeModelEffect;
        private RasterizerState wireframeRasterizerState;
        Vector2 screenCentre = Vector2.Zero;
        private Scene currentScene;

        public GraphicsDeviceManager Graphics => _graphics;
        public SpriteBatch SpriteBatch => _spriteBatch;
        public BasicEffect ModelEffect => modelEffect;
        public BasicEffect UnlitTexturedEffect => unlitTexturedEffect;
        public BasicEffect UnlitWireframeEffect => unlitWireframeEffect;
        public CameraManager CameraManager => cameraManager;
        public ObjectManager ObjectManager => objectManager;
        public KeyboardManager KeyboardManager => keyboardManager;
        public MouseManager MouseManager => mouseManager;
        public SpriteFont DebugFont => debugFont;
        public BasicEffect WireframeModelEffect => wireframeModelEffect;
        public RasterizerState WireframeRasterizerState => wireframeRasterizerState;
        public Vector2 ScreenCentre => screenCentre;
=======
        private SoundManager soundManager;
>>>>>>> 9b6da371c2d3c5c8de08bb7b4cfe32852a54fc3c

        //eventually we will remove this content
        private VertexPositionColorTexture[] vertices;
        private Texture2D backSky, leftSky, rightSky, frontSky, topSky, grass;
        private SoundEffect track01, track02, track03, track04, track05;
        private PrimitiveObject archetypalTexturedQuad;
        private float worldScale = 3000;
        PrimitiveObject primitiveObject = null;
        

        public Main()
        {
            _graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
            IsMouseVisible = true;
        }

        #region Initialization - Managers, Cameras, Effects, Textures, Audio
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here
            Window.Title = "My Amazing Game";

            //camera
            cameraManager = new CameraManager(this);
            Components.Add(this.cameraManager);

            //keyboard
            keyboardManager = new KeyboardManager(this);
            Components.Add(this.keyboardManager);

            //mouse
            mouseManager = new MouseManager(this, false);
            Components.Add(this.mouseManager);

<<<<<<< HEAD
=======
            //Sound
            this.soundManager = new SoundManager(this);
            Components.Add(this.soundManager);

            InitCameras3D();
>>>>>>> 9b6da371c2d3c5c8de08bb7b4cfe32852a54fc3c
            InitManagers();
            InitFonts();
            InitEffect();

            InitGraphics(1024, 768);
           
            base.Initialize();

            currentScene = new MainScene(this);
            currentScene.Initialize();
        }

        private void InitGraphics(int width, int height)
        {
            //set resolution
            _graphics.PreferredBackBufferWidth = width;
            this._graphics.PreferredBackBufferHeight = height;

            //dont forget to apply resolution changes otherwise we wont see the new WxH
            this._graphics.ApplyChanges();

            //set screen centre based on resolution
            screenCentre = new Vector2(width / 2, height / 2);

            //set cull mode to show front and back faces - inefficient but we will change later
            RasterizerState rs = new RasterizerState();
            rs.CullMode = CullMode.None;
            this._graphics.GraphicsDevice.RasterizerState = rs;

            //we use a sampler state to set the texture address mode to solve the aliasing problem between skybox planes
            SamplerState samplerState = new SamplerState();
            samplerState.AddressU = TextureAddressMode.Clamp;
            samplerState.AddressV = TextureAddressMode.Clamp;
            this._graphics.GraphicsDevice.SamplerStates[0] = samplerState;
        }
        

        private void InitDebug()
        {
            /*Components.Add(new DebugDrawer(this, _spriteBatch, this.debugFont,
                this.cameraManager, this.objectManager));*/

        }

        private void InitFonts()
        {
            this.debugFont = Content.Load<SpriteFont>("Assets/Fonts/debug");
        }

        private void InitManagers()
        {
            this.objectManager = new ObjectManager(this, 6, 10, this.cameraManager);
            Components.Add(this.objectManager);
        }

        private void InitEffect()
        {
            //to do...
            this.unlitTexturedEffect = new BasicEffect(this._graphics.GraphicsDevice);
            this.unlitTexturedEffect.VertexColorEnabled = true; //otherwise we wont see RGB
            this.unlitTexturedEffect.TextureEnabled = true;

            //wireframe primitives with no lighting and no texture
            this.unlitWireframeEffect = new BasicEffect(this._graphics.GraphicsDevice);
            this.unlitWireframeEffect.VertexColorEnabled = true;

            //model effect
            //add a ModelObject
            this.modelEffect = new BasicEffect(this._graphics.GraphicsDevice);
            this.modelEffect.TextureEnabled = true;
            //this.modelEffect.LightingEnabled = true;
            //this.modelEffect.EnableDefaultLighting();

            this.wireframeModelEffect = new BasicEffect(this._graphics.GraphicsDevice);
            this.wireframeModelEffect.TextureEnabled = false;
            this.wireframeModelEffect.VertexColorEnabled = true;

            this.wireframeRasterizerState = new RasterizerState();
            this.wireframeRasterizerState.FillMode = FillMode.WireFrame;
        }

        
        #endregion

<<<<<<< HEAD
        #region Load and Unload Content

        protected void LoadContent()
=======
        #region Initialization - Vertices, Archetypes, Helpers, Drawn Content(e.g. Skybox), Audio
        private void InitDrawnContent() //formerly InitPrimitives
        {
            //add archetypes that can be cloned
            InitPrimitiveArchetypes();

            //adds origin helper etc
            InitHelpers();

            //add skybox
            //InitSkybox();

            //add grass plane
            //InitGround();

            //models
            InitStaticModels();

            //grid
            InitGrid();

            //Audio
            InitSound();

        }

        private void InitGrid()
        {
            Grid grid = new Grid(new Transform3D(new Vector3(0, 0, 0), -Vector3.UnitZ, Vector3.UnitY), new TileFactory(keyboardManager, objectManager, Content, modelEffect));
            grid.GenerateGrid(@"GDLibrary\Grid\LevelFiles\LevelTest2.json");
        }

        private void InitStaticModels()
        {
            //transform
            Transform3D transform3D = new Transform3D(Vector3.Up,
                                Vector3.Zero,       //rotation
                                Vector3.One,        //scale
                                    -Vector3.UnitZ,         //look
                                    Vector3.UnitY);         //up

            //effectparameters
            EffectParameters effectParameters = new EffectParameters(modelEffect,
                Content.Load<Texture2D>("Assets/Textures/Props/Crates/crate1"),
                Color.White, 1);

            //model
            Model model = Content.Load<Model>("Assets/Models/box2");

            //model object
            /*ModelObject archetypalBoxObject = new ModelObject("car", ActorType.Player,
                StatusType.Drawn | StatusType.Update, transform3D,
                effectParameters, model);
            this.objectManager.Add(archetypalBoxObject);*/
            
            EffectParameters wireframeEffectParameters =
                new EffectParameters(modelEffect, null, Color.White, 1);
            
            
            this.archetypalBoxWireframe = new ModelObject("original wireframe box mesh",
            ActorType.Helper, StatusType.Update | StatusType.Drawn , transform3D, wireframeEffectParameters,model,wireframeRasterizerState);

            this.objectManager.Add(archetypalBoxWireframe);
        }

        private void InitVertices()
        {
            this.vertices
                = new VertexPositionColorTexture[4];

            float halfLength = 0.5f;
            //TL
            vertices[0] = new VertexPositionColorTexture(
                new Vector3(-halfLength, halfLength, 0),
                new Color(255, 255, 255, 255), new Vector2(0, 0));

            //BL
            vertices[1] = new VertexPositionColorTexture(
                new Vector3(-halfLength, -halfLength, 0),
                Color.White, new Vector2(0, 1));

            //TR
            vertices[2] = new VertexPositionColorTexture(
                new Vector3(halfLength, halfLength, 0),
                Color.White, new Vector2(1, 0));

            //BR
            vertices[3] = new VertexPositionColorTexture(
                new Vector3(halfLength, -halfLength, 0),
                Color.White, new Vector2(1, 1));
        }

        private void InitPrimitiveArchetypes() //formerly InitTexturedQuad
        {
            Transform3D transform3D = new Transform3D(Vector3.Zero, Vector3.Zero,
               Vector3.One, Vector3.UnitZ, Vector3.UnitY);

            EffectParameters effectParameters = new EffectParameters(this.unlitTexturedEffect,
                this.grass, /*bug*/ Color.White, 1);

            IVertexData vertexData = new VertexData<VertexPositionColorTexture>(
                this.vertices, PrimitiveType.TriangleStrip, 2);

            this.archetypalTexturedQuad = new PrimitiveObject("original texture quad",
                ActorType.Decorator,
                StatusType.Update | StatusType.Drawn,
                transform3D, effectParameters, vertexData);
        }

        //VertexPositionColorTexture - 4 bytes x 3 (x,y,z) + 4 bytes x 3 (r,g,b) + 4bytes x 2 = 26 bytes
        //VertexPositionColor -  4 bytes x 3 (x,y,z) + 4 bytes x 3 (r,g,b) = 24 bytes
        private void InitHelpers()
        {
            //to do...add wireframe origin
            PrimitiveType primitiveType;
            int primitiveCount;

            //step 1 - vertices
            VertexPositionColor[] vertices = VertexFactory.GetVerticesPositionColorOriginHelper(
                                    out primitiveType, out primitiveCount);

            //step 2 - make vertex data that provides Draw()
            IVertexData vertexData = new VertexData<VertexPositionColor>(vertices, 
                                    primitiveType, primitiveCount);

            //step 3 - make the primitive object
            Transform3D transform3D = new Transform3D(new Vector3(0, 20, 0),
                Vector3.Zero, new Vector3(10, 10, 10),
                Vector3.UnitZ, Vector3.UnitY);

            EffectParameters effectParameters = new EffectParameters(this.unlitWireframeEffect,
                null, Color.White, 1);

            //at this point, we're ready!
            PrimitiveObject primitiveObject = new PrimitiveObject("origin helper",
                ActorType.Helper, StatusType.Drawn, transform3D, effectParameters, vertexData);

            this.objectManager.Add(primitiveObject);

        }

        //private void InitSkybox()
        //{ 
        //    //back
        //    primitiveObject = this.archetypalTexturedQuad.Clone() as PrimitiveObject;
        //  //  primitiveObject.StatusType = StatusType.Off; //Experiment of the effect of StatusType
        //    primitiveObject.ID = "sky back";
        //    primitiveObject.EffectParameters.Texture = this.backSky;
        //    primitiveObject.Transform3D.Scale = new Vector3(worldScale, worldScale, 1);
        //    primitiveObject.Transform3D.Translation = new Vector3(0, 0, -worldScale / 2.0f);
        //    this.objectManager.Add(primitiveObject);

        //    //left
        //    primitiveObject = this.archetypalTexturedQuad.Clone() as PrimitiveObject;
        //    primitiveObject.ID = "left back";
        //    primitiveObject.EffectParameters.Texture = this.leftSky;
        //    primitiveObject.Transform3D.Scale = new Vector3(worldScale, worldScale, 1);
        //    primitiveObject.Transform3D.RotationInDegrees = new Vector3(0, 90, 0);
        //    primitiveObject.Transform3D.Translation = new Vector3(-worldScale / 2.0f, 0, 0);
        //    this.objectManager.Add(primitiveObject);

        //    //right
        //    primitiveObject = this.archetypalTexturedQuad.Clone() as PrimitiveObject;
        //    primitiveObject.ID = "sky right";
        //    primitiveObject.EffectParameters.Texture = this.rightSky;
        //    primitiveObject.Transform3D.Scale = new Vector3(worldScale, worldScale, 20);
        //    primitiveObject.Transform3D.RotationInDegrees = new Vector3(0, -90, 0);
        //    primitiveObject.Transform3D.Translation = new Vector3(worldScale / 2.0f, 0, 0);
        //    this.objectManager.Add(primitiveObject);

             
        //    //top
        //    primitiveObject = this.archetypalTexturedQuad.Clone() as PrimitiveObject;
        //    primitiveObject.ID = "sky top";
        //    primitiveObject.EffectParameters.Texture = this.topSky;
        //    primitiveObject.Transform3D.Scale = new Vector3(worldScale, worldScale, 1);
        //    primitiveObject.Transform3D.RotationInDegrees = new Vector3(90, -90, 0);
        //    primitiveObject.Transform3D.Translation = new Vector3(0 ,worldScale / 2.0f, 0);
        //    this.objectManager.Add(primitiveObject);

        //    //to do...front
        //    primitiveObject = this.archetypalTexturedQuad.Clone() as PrimitiveObject;
        //    primitiveObject.ID = "sky front";
        //    primitiveObject.EffectParameters.Texture = this.frontSky;
        //    primitiveObject.Transform3D.Scale = new Vector3(worldScale, worldScale, 1);
        //    primitiveObject.Transform3D.RotationInDegrees = new Vector3(0, 180, 0);
        //    primitiveObject.Transform3D.Translation = new Vector3(0, 0, worldScale / 2.0f);
        //    this.objectManager.Add(primitiveObject);

        //}

        //private void InitGround()
        //{
        //    //grass
        //    primitiveObject = this.archetypalTexturedQuad.Clone() as PrimitiveObject;
        //    primitiveObject.ID = "grass";
        //    primitiveObject.EffectParameters.Texture = this.grass;
        //    primitiveObject.Transform3D.Scale = new Vector3(worldScale, worldScale, 1);
        //    primitiveObject.Transform3D.RotationInDegrees = new Vector3(90, 90, 0);
        //    this.objectManager.Add(primitiveObject);
        //}

        private void InitGraphics(int width, int height)
        {
            //set resolution
            this._graphics.PreferredBackBufferWidth = width;
            this._graphics.PreferredBackBufferHeight = height;

            //dont forget to apply resolution changes otherwise we wont see the new WxH
            this._graphics.ApplyChanges();

            //set screen centre based on resolution
            this.screenCentre = new Vector2(width / 2, height / 2);

            //set cull mode to show front and back faces - inefficient but we will change later
            RasterizerState rs = new RasterizerState();
            rs.CullMode = CullMode.None;
            this._graphics.GraphicsDevice.RasterizerState = rs;

            //we use a sampler state to set the texture address mode to solve the aliasing problem between skybox planes
            SamplerState samplerState = new SamplerState();
            samplerState.AddressU = TextureAddressMode.Clamp;
            samplerState.AddressV = TextureAddressMode.Clamp;
            this._graphics.GraphicsDevice.SamplerStates[0] = samplerState;
        }

        private void InitSound()
        {
            //step 1 - load songs
            this.track01 = Content.Load<SoundEffect>("Assets/Sound/GameTrack01");
            this.track02 = Content.Load<SoundEffect>("Assets/Sound/Ambiance02");
            this.track03 = Content.Load<SoundEffect>("Assets/Sound/Knock03");
            this.track04 = Content.Load<SoundEffect>("Assets/Sound/Chains01");
            this.track05 = Content.Load<SoundEffect>("Assets/Sound/Click01");

            //Step 2- Make into sounds
            this.soundManager.Add(new Sounds(null, track01, "main", ActorType.MusicTrack, StatusType.Update));
            this.soundManager.Add(new Sounds(null, track02, "ambiance", ActorType.MusicTrack, StatusType.Update));
            this.soundManager.Add(new Sounds(null, track03, "playerMove", ActorType.SoundEffect, StatusType.Update));
            this.soundManager.Add(new Sounds(null, track04, "chainRattle", ActorType.SoundEffect, StatusType.Update));
            this.soundManager.Add(new Sounds(null, track05, "Attach", ActorType.SoundEffect, StatusType.Update));

            this.soundManager.playSoundEffect("main");
        }

        protected override void LoadContent()
>>>>>>> 9b6da371c2d3c5c8de08bb7b4cfe32852a54fc3c
        {
            _spriteBatch = new SpriteBatch(GraphicsDevice);
            InitDebug();
        }

        protected override void UnloadContent()
        {
            base.UnloadContent();
        }

        #endregion


        #region Update & Draw
        protected override void Update(GameTime gameTime)
        {
            if (this.keyboardManager.IsFirstKeyPress(Keys.Escape))
                Exit();

<<<<<<< HEAD
=======
            if (this.keyboardManager.IsFirstKeyPress(Keys.C))
            {
                this.cameraManager.CycleActiveCamera();
                // this.cameraManager.ActiveCameraIndex++;
            }

            //use g and space
            RaycastTests();

            //Cycle Through Audio
            if (this.keyboardManager.IsFirstKeyPress(Keys.M))
            {
                this.soundManager.nextSong();
            }

>>>>>>> 9b6da371c2d3c5c8de08bb7b4cfe32852a54fc3c
            base.Update(gameTime);
            currentScene.Update(gameTime);
        }

<<<<<<< HEAD
=======
        private void RaycastTests()
        {
            if (this.keyboardManager.IsFirstKeyPress(Keys.G))
            {
                ModelObject o = (ModelObject)this.archetypalBoxWireframe.Clone();
                o.ControllerList.Add(new CustomBoxColliderController(ColliderType.Cube,1));
                o.Transform3D = new Transform3D(Vector3.Up * 5, -Vector3.Forward, Vector3.Up);
                objectManager.Add(o);

                o = (ModelObject)o.Clone();
                o.Transform3D.Translation = new Vector3(5, 5, 0);
                objectManager.Add(o);
            }

            if (this.keyboardManager.IsFirstKeyPress(Keys.Space))
            {
                List<Raycaster.HitResult> hit = Raycaster.RaycastAll(new Vector3(0, 5, -5), new Vector3(0, 0, 1),
                    objectManager.FindAll(a => a != null));
                   
                Debug.WriteLine("NEW HIT : MULTI");
                   
                Debug.WriteLine("List size : " + hit.Count);
                   
                foreach (Raycaster.HitResult result in hit)
                {
                    Debug.WriteLine("DISTANCE : " + result.distance + " ,ACTOR:" + result.actor);
                }
                
                hit.Sort((result, hitResult) => (int)(result.distance - hitResult.distance));
                   
                hit = Raycaster.RaycastAll(new Vector3(-5, 5, 0), new Vector3(1, 0, 0),
                    objectManager.FindAll(a => a != null));
                   
                Debug.WriteLine("NEW HIT : MULTI");
                   
                Debug.WriteLine("List size : " + hit.Count);
                
                hit.Sort((result, hitResult) => (int)(result.distance - hitResult.distance));
                
                foreach (Raycaster.HitResult result in hit)
                {
                    Debug.WriteLine("DISTANCE : " + result.distance + " ,ACTOR:" + result.actor);
                }
                
                Debug.WriteLine("NEW HIT : SINGLE");
                
                Raycaster.HitResult hitSingle = Raycaster.Raycast(new Vector3(-5, 5, 0), new Vector3(1, 0, 0),
                    objectManager.FindAll(a => a != null));
                
                Debug.WriteLine("DISTANCE : " + hitSingle.distance + " ,ACTOR:" + hitSingle.actor);
            }
        }
    
>>>>>>> 9b6da371c2d3c5c8de08bb7b4cfe32852a54fc3c
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);

            base.Draw(gameTime);
            currentScene.Draw(gameTime);
        }

        #endregion
    }
}